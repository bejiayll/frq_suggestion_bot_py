from configpy.keyboards import *

import configpy.jsoncontrolleer as jsc

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

import aiogram
import asyncio
import os


load_dotenv()
TOKEN = os.getenv("TOKEN")
ID_CHANNEL = os.getenv("ID_CHANNEL")


bot = Bot(token=TOKEN)

dp = Dispatcher()

# Functions

def user_in_base(id: str) -> bool:
    return str(id) in jsc.load("data.json")

def is_mod(id : str) -> bool:
    if str(id) in jsc.load("data.json"):
        return jsc.load("data.json")[str(id)]["permissions"] >= 1
    else: return False

def is_superuser(id: str) -> bool:
    if str(id) in jsc.load("data.json"):
        return jsc.load("data.json")[str(id)]["permissions"] > 1
    else: return False

async def send_to_admin(text: str):
    for u in jsc.load("data.json"): 
        if is_mod(u) or is_superuser(u):
            await bot.send_message(u, f"{text}")

# Commands handler

@dp.message(Command("start"))
async def com_start(message: types.Message):
    print(message.text)

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb_01_welcome,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é.", reply_markup=keyboard)

# @dp.message(Command("debug_send_to_chat"))
# async def sendtochat(message: types.Message):
#     await bot.send_message(ID_CHANNEL, "test")
@dp.message(Command("help"))
async def com_help(message: types.Message):
    if is_mod(message.from_user.id):
        await message.answer("""/start - –Ω–∞—á–∞—Ç—å
        /help - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —ç—Ç–æ –º–µ–Ω—é
        /verify <user_id> ... <user_id> - –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /all_users - —Å–∞–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤   
        """)

@dp.message(Command("contact"))
async def com_contact(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) > 1:
        
        await send_to_admin(f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id} {message.from_user.full_name}:\n {args[1]}\n")

        await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ")
    else:
        await message.answer("–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç: /contact <–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>")

@dp.message(Command("verify"))
async def com_verif(message: types.Message):

    '''
    syntax:
    /verify <user_1 id: Integer> <user_2 id: Integer> ... <user_N id: Integer>
    '''    
    
    if is_mod(str(message.from_user.id)) or is_superuser(str(message.from_user.id)):
        args = message.text.split()
        print(args)
        if len(args) < 2:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ id —Ö–æ—Ç—è–±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."); return
        
        counter = 0
        for id in args:
            if (user_in_base(id)) and (jsc.load("data.json")[id]["status"] < 1):
                data = jsc.load("data.json")
                data[id]["status"] = 1
                jsc.dump("data.json", data)
                counter += 1
        await message.answer(f"–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {counter}.")

    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@dp.message(Command("set_value"))
async def com_set_value(message: types.Message):

    
    '''
    syntax:
    /set_value <user id : Integer> <edit value : String> <set value : Integer from 0 to 2>
    Allowed values:
        status:
            0 - unverified
            1 - verified
            2 - banned 
    
        permissions:
            0 - user (no permissions)
            1 - moderator (can verify users)
            2 - superuser(all permissions)
    '''

    args = message.text.split()
    if is_superuser((str)(message.from_user.id)):
        try:
            user = args[1]
            value = args[2]
            to_value = int(args[3])
            data = jsc.load("data.json")
            data[id][value] = to_value
            jsc.dump("data.json", data)
            await message.answer(f"–ò–∑–º–µ–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ {value} –¥–ª—è {user} –Ω–∞ {to_value}")

        except:
            await message.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


@dp.message(Command("all_users"))
async def com_all_users(message: types.Message):
    if is_mod(message.from_user.id):
        all_user = ""
        data = jsc.load("data.json") 
        for u in data:
            sts_int = data[u]["status"] 
            prm_int = data[u]["permissions"] 
            status: str
            perm: str
            match sts_int:
                case 0 : status = "‚ùì–û–∂–∏–¥–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"
                case 1 : status = "‚úÖ–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
                case 2 : status = "üìõ–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            match prm_int:
                case 0 : perm = "üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                case 1 : perm = "üõ°Ô∏è–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
                case 2 : perm = "‚≠ê–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            all_user += (f"{u} : {status} | {perm}\n")
        await message.answer(all_user)

@dp.message(Command("debug_im_superuser"))
async def debug_com_user_is_superuser(message: types.Message):
    await message.answer(str(is_superuser(str(message.from_user.id))))

# Buttons handler

@dp.message(F.text.lower() == "–¥–æ–º–æ–π")
async def account_handler(message: types.Message):

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb_01_welcome,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –¥–æ–º–æ–π", reply_markup=keyboard)


@dp.message(F.text.lower() == "–∞–∫–∫–∞—É–Ω—Ç")
async def account_handler(message: types.Message):

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb_03_account,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

    await message.answer("–ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Ä–∞–∑–¥–µ–ª –∞–∫–∫–∞—É–Ω—Ç–∞", reply_markup=keyboard)


@dp.message(F.text.lower() == "–æ–ø—Ü–∏–∏")
async def account_handler(message: types.Message):

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb_02_settings,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

    await message.answer("–ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=keyboard)


@dp.message(F.text.lower() == "—Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
async def account_status_handler(message: types.Message):
    dct = jsc.load("data.json")
    author_id = (str)(message.from_user.id)

    if author_id in dct:

        author_status_id = dct[author_id]["status"]
        author_perm_id = dct[author_id]["permissions"]

        match author_status_id:
            case 0 : status = "‚ùì–û–∂–∏–¥–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"
            case 1 : status = "‚úÖ–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
            case 2 : status = "üìõ–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        match author_perm_id:
            case 0 : perm = "üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            case 1 : perm = "üõ°Ô∏è–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
            case 2 : perm = "‚≠ê–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        await message.answer(f"–í–∞—à —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {status}\n–í–∞—à–∏ –ø—Ä–∞–≤–∞: {perm}")

    else:

        inline_builder = InlineKeyboardBuilder()
        inline_builder.add(InlineKeyboardButton(text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.", callback_data = "verify_req"))
        await message.answer("–í—ã –Ω–µ –≤ –±–∞–∑–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", reply_markup= inline_builder.as_markup())

@dp.message(F.text.lower() == "f.a.q.")
async def faq_handler(message: types.Message):
    await message.answer("W.I.P.")

@dp.message(F.text.lower() == "—Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
async def contact_admin_handler(message: types.Message):
    await message.answer('–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É " /contact <–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ> " ')

# Callback

@dp.callback_query(lambda call: call.data == "verify_req")
async def callback_req_verify(callback_query: types.CallbackQuery):
    user = callback_query.from_user.id
    user_name = callback_query.from_user.full_name
    
    if not user_in_base(str(user)):
        for u in jsc.load("data.json"):
            if is_mod(u): await bot.send_message(int(u), f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (`{user}`) –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.")
        
        await bot.send_message(user, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –±–ª–æ–≥, —á—Ç–æ–±—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É.")
        base = jsc.load("data.json")
        base[user] = {"status" : 0, 
                      "permissions" : 0}
        jsc.dump("data.json", base)
    
    else: 
        await bot.send_message(user, "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")

# Message handler

@dp.message()
async def message_handler(message: types.Message):
    if "https://" in message.text:
        if str(message.from_user.id) in jsc.load("data.json"):
            text = message.text
            text = text
            if jsc.load("data.json")[str(message.from_user.id)]["status"] > 0:
                await bot.send_message(ID_CHANNEL, text)
                await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ")
                await send_to_admin(f"–°—Å—ã–ª–∫–∞ –æ—Ç `{message.from_user.id}`, {message.from_user.full_name}\n {text}")
            else: 
                await send_to_admin(f"–°—Å—ã–ª–∫–∞ –æ—Ç {message.from_user.id}, {message.from_user.full_name}\n {text}")
                await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        else: 
            await message.reply("–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É, –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")

                    
###=================###

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
from configpy.keyboards import *

import configpy.jsoncontrolleer as jsc

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

import aiogram
import asyncio
import os


load_dotenv()
TOKEN = os.getenv("TOKEN")


bot = Bot(token=TOKEN)
dp = Dispatcher()

# Functions

def ismod(id : str) -> bool:
    return id in jsc.load("mods.json")

def user_in_base(id: str) -> bool:
    return id in jsc.load("data.json")

# Commands handler

@dp.message(Command("start"))
async def com_start(message: types.Message):
    print(message.text)

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb_01_welcome,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", reply_markup=keyboard)
    await bot.send_sticker(message.from_user.id, sticker="CAACAgIAAxkBAAEMGcRnnNSfm088IIxaIgNmYZZcZFRLFgACpFcAAoH6YEtxYB8QQkhdCTYE")


@dp.message(Command("verif"))
async def com_verif(message: types.Message):
    
    if ismod(message.from_user.id):
        args = message.text.split()
        if len(args) < 2:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è–±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"); return
        
        counter = 0
        for id in args:
            if (isinstance(id, int)) and (id in jsc.load("data.json")) and (jsc.load("data.json")[id]["status"] < 1):
                ...
                

# Buttons handler

@dp.message(F.text.lower() == "–¥–æ–º–æ–π")
async def account_handler(message: types.Message):

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb_01_welcome,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –¥–æ–º–æ–π", reply_markup=keyboard)


@dp.message(F.text.lower() == "–∞–∫–∫–∞—É–Ω—Ç")
async def account_handler(message: types.Message):

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb_03_account,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

    await message.answer("–ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Ä–∞–∑–¥–µ–ª –∞–∫–∫–∞—É–Ω—Ç–∞", reply_markup=keyboard)


@dp.message(F.text.lower() == "–æ–ø—Ü–∏–∏")
async def account_handler(message: types.Message):

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb_02_settings,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

    await message.answer("–ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=keyboard)


@dp.message(F.text.lower() == "—Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
async def account_status_handler(message: types.Message):
    dct = jsc.load("data.json")
    author_id = (str)(message.from_user.id)
    author_status_id = dct[author_id]["status"]
    author_perm_id = dct[author_id]["permissions"]

    if author_id in dct:
        match author_status_id:
            case 0 : status = "‚ùì–ü—Ä–æ—Ö–æ–∏—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"
            case 1 : status = "‚úÖ–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
            case 2 : status = "üìõ–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        match author_perm_id:
            case 0 : perm = "üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            case 1 : perm = "üõ°Ô∏è–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
            case 2 : perm = "‚≠ê–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        await message.answer(f"–í–∞—à —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {status}\n–í–∞—à–∏ –ø—Ä–∞–≤–∞: {perm}")

    else:
        await message.answer("–í—ã –Ω–µ –≤ –±–∞–∑–µ, –Ω–∞–∂–º–∏—Ç–µ inline-–∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")

###=================###

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())